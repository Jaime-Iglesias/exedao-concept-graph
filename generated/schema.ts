// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Daoist extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Daoist entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Daoist entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Daoist", id.toString(), this);
  }

  static load(id: string): Daoist | null {
    return store.get("Daoist", id) as Daoist | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    return value.toBigInt();
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }
}

export class Application extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Application entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Application entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Application", id.toString(), this);
  }

  static load(id: string): Application | null {
    return store.get("Application", id) as Application | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    return value.toBigInt();
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }

  get metaHash(): Bytes {
    let value = this.get("metaHash");
    return value.toBytes();
  }

  set metaHash(value: Bytes) {
    this.set("metaHash", Value.fromBytes(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get weiTribute(): BigInt {
    let value = this.get("weiTribute");
    return value.toBigInt();
  }

  set weiTribute(value: BigInt) {
    this.set("weiTribute", Value.fromBigInt(value));
  }

  get tokenTributes(): Array<Bytes> {
    let value = this.get("tokenTributes");
    return value.toBytesArray();
  }

  set tokenTributes(value: Array<Bytes>) {
    this.set("tokenTributes", Value.fromBytesArray(value));
  }

  get tokenTributeValues(): Array<BigInt> {
    let value = this.get("tokenTributeValues");
    return value.toBigIntArray();
  }

  set tokenTributeValues(value: Array<BigInt>) {
    this.set("tokenTributeValues", Value.fromBigIntArray(value));
  }

  get acceptedAtBlock(): BigInt {
    let value = this.get("acceptedAtBlock");
    return value.toBigInt();
  }

  set acceptedAtBlock(value: BigInt) {
    this.set("acceptedAtBlock", Value.fromBigInt(value));
  }

  get canceledAtBlock(): BigInt {
    let value = this.get("canceledAtBlock");
    return value.toBigInt();
  }

  set canceledAtBlock(value: BigInt) {
    this.set("canceledAtBlock", Value.fromBigInt(value));
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Proposal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Proposal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Proposal", id.toString(), this);
  }

  static load(id: string): Proposal | null {
    return store.get("Proposal", id) as Proposal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get metaHash(): Bytes {
    let value = this.get("metaHash");
    return value.toBytes();
  }

  set metaHash(value: Bytes) {
    this.set("metaHash", Value.fromBytes(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get votes(): Array<string> {
    let value = this.get("votes");
    return value.toStringArray();
  }

  set votes(value: Array<string>) {
    this.set("votes", Value.fromStringArray(value));
  }

  get acceptedAtBlock(): BigInt {
    let value = this.get("acceptedAtBlock");
    return value.toBigInt();
  }

  set acceptedAtBlock(value: BigInt) {
    this.set("acceptedAtBlock", Value.fromBigInt(value));
  }

  get expirationBlock(): BigInt {
    let value = this.get("expirationBlock");
    return value.toBigInt();
  }

  set expirationBlock(value: BigInt) {
    this.set("expirationBlock", Value.fromBigInt(value));
  }

  get expired(): boolean {
    let value = this.get("expired");
    return value.toBoolean();
  }

  set expired(value: boolean) {
    this.set("expired", Value.fromBoolean(value));
  }
}

export class ProposalVote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProposalVote entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProposalVote entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProposalVote", id.toString(), this);
  }

  static load(id: string): ProposalVote | null {
    return store.get("ProposalVote", id) as ProposalVote | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get voter(): Bytes {
    let value = this.get("voter");
    return value.toBytes();
  }

  set voter(value: Bytes) {
    this.set("voter", Value.fromBytes(value));
  }

  get proposalHash(): Bytes {
    let value = this.get("proposalHash");
    return value.toBytes();
  }

  set proposalHash(value: Bytes) {
    this.set("proposalHash", Value.fromBytes(value));
  }

  get votes(): BigInt {
    let value = this.get("votes");
    return value.toBigInt();
  }

  set votes(value: BigInt) {
    this.set("votes", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get decimals(): BigInt | null {
    let value = this.get("decimals");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set decimals(value: BigInt | null) {
    if (value === null) {
      this.unset("decimals");
    } else {
      this.set("decimals", Value.fromBigInt(value as BigInt));
    }
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get admitted(): boolean {
    let value = this.get("admitted");
    return value.toBoolean();
  }

  set admitted(value: boolean) {
    this.set("admitted", Value.fromBoolean(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transfer", id.toString(), this);
  }

  static load(id: string): Transfer | null {
    return store.get("Transfer", id) as Transfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Extension extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Extension entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Extension entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Extension", id.toString(), this);
  }

  static load(id: string): Extension | null {
    return store.get("Extension", id) as Extension | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get extensionIndex(): BigInt {
    let value = this.get("extensionIndex");
    return value.toBigInt();
  }

  set extensionIndex(value: BigInt) {
    this.set("extensionIndex", Value.fromBigInt(value));
  }

  get metaHash(): Bytes {
    let value = this.get("metaHash");
    return value.toBytes();
  }

  set metaHash(value: Bytes) {
    this.set("metaHash", Value.fromBytes(value));
  }

  get extensionAddress(): Bytes {
    let value = this.get("extensionAddress");
    return value.toBytes();
  }

  set extensionAddress(value: Bytes) {
    this.set("extensionAddress", Value.fromBytes(value));
  }

  get useDelegate(): boolean {
    let value = this.get("useDelegate");
    return value.toBoolean();
  }

  set useDelegate(value: boolean) {
    this.set("useDelegate", Value.fromBoolean(value));
  }

  get functionSignatures(): Array<Bytes> {
    let value = this.get("functionSignatures");
    return value.toBytesArray();
  }

  set functionSignatures(value: Array<Bytes>) {
    this.set("functionSignatures", Value.fromBytesArray(value));
  }
}

export class MetaData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MetaData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MetaData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MetaData", id.toString(), this);
  }

  static load(id: string): MetaData | null {
    return store.get("MetaData", id) as MetaData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (value === null) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(value as string));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (value === null) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(value as string));
    }
  }
}
